<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Checker - Home</title>

    <!-- Custom fonts for this template-->
    <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="css/sb-admin-2.min.css" rel="stylesheet">

    <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" 
    rel="stylesheet" />
    <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>

</head>

<body id="page-top">
    <%- include('header.ejs') %>
        <!-- End of Topbar -->

        <!-- Begin Page Content -->
    <div class="container-fluid">
            <!-- Page Heading -->
        <div class="d-sm-flex align-items-center mb-4">
            <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
        </div>
            <!-- Content Row -->
        <div class="row">

                <!-- Earnings (Monthly) Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Total Student
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800"><%= total %>
                                </div>
                                </div>
                            <div class="col-auto">
                                <i class="fas fa-user fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

                <!-- Earnings (Monthly) Card Example -->
             <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                        Total Curriculum</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800"><%= totalCurr %></div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

                <!-- Earnings (Monthly) Card Example -->
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                        Total Section</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800"><%= totalSec  %></div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-user-circle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Pending Requests Card Example -->
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                        Total Student (Present / Absent / Late)</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800"><%= totalStdList %></div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-comments fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Content Row -->

            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Students</h6>
                </div>
                <div class="card-body">
                        <!-- แทนที่ตรงนี้ -->
                    <div id="dataTable"></div>

                    <!-- script -->
                    <script>
                        const grid = new gridjs.Grid({
                            columns: [
                                'Student ID', 
                                'Prefix',
                                'First Name', 
                                'Last Name', 
                                'Date of Birth', 
                                'Curriculum',
                                'Sex', 
                                'Previous School',
                                'Address',
                                'Telephone',
                                'Email',
                                'Line ID',
                                'Status',
                                {
                                    name: 'Actions',
                                    formatter: (cell, row) => {
                                        const isExistingStudent = row.cells[0].data !== ""; // ตรวจสอบว่า Student ID มีหรือไม่
                        
                                        return gridjs.h('div', {}, [
                                            isExistingStudent ? 
                                            // ปุ่ม Edit สำหรับนักเรียนที่มีอยู่แล้ว
                                            gridjs.h('button', {
                                                className: 'btn btn-primary mr-2',
                                                onClick: () => {
                                                    $('#exampleModal').modal('show');
                                                    document.getElementById('exampleModalLabel').textContent = 'Edit Student';
                                                    document.getElementById('inputId').value = row.cells[0].data;
                                                    document.getElementById('inputPrefix').value = row.cells[1].data;
                                                    document.getElementById('inputFirstName').value = row.cells[2].data;
                                                    document.getElementById('inputLastName').value = row.cells[3].data;
                                                    document.getElementById('inputDateOfBirth').value = row.cells[4].data;
                                                    document.getElementById('inputCurriculumn').value = row.cells[5].data;
                                                    document.getElementById('inputSex').value = row.cells[6].data;
                                                    document.getElementById('inputPreviousSchoo').value = row.cells[7].data;
                                                    document.getElementById('inputAddress').value = row.cells[8].data;
                                                    document.getElementById('inputTelephone').value = row.cells[9].data;
                                                    document.getElementById('inputEmail').value = row.cells[10].data;
                                                    document.getElementById('inputLineID').value = row.cells[11].data;
                                                    document.getElementById('inputStatus').value = row.cells[12].data;
                        
                                                    document.getElementById('saveChanges').onclick = async () => {
                                                        const updatedData = {
                                                            id: row.cells[0].data, 
                                                            prefix_name: document.getElementById('inputPrefix').value,
                                                            first_name: document.getElementById('inputFirstName').value,
                                                            last_name: document.getElementById('inputLastName').value,
                                                            date_of_birth: document.getElementById('inputDateOfBirth').value,
                                                            curriculum_name: document.getElementById('inputCurriculumn').value,
                                                            sex: document.getElementById('inputSex').value,
                                                            previous_school: document.getElementById('inputPreviousSchoo').value,
                                                            address: document.getElementById('inputAddress').value,
                                                            telephone: document.getElementById('inputTelephone').value,
                                                            email: document.getElementById('inputEmail').value,
                                                            line_id: document.getElementById('inputLineID').value,
                                                            status: document.getElementById('inputStatus').value
                                                        };
                        
                                                        try {
                                                            const response = await fetch(`http://localhost:3100/api/student/${updatedData.id}`, {
                                                                method: 'PUT',
                                                                headers: { 'Content-Type': 'application/json' },
                                                                body: JSON.stringify(updatedData)
                                                            });
                        
                                                            if (response.ok) {
                                                                alert('Student updated successfully');
                                                                $('#exampleModal').modal('hide');
                                                                grid.forceRender();
                                                            } else {
                                                                alert('Error updating student');
                                                            }
                                                        } catch (error) {
                                                            alert('Error updating student');
                                                        }
                                                    };
                                                }
                                            }, 'Edit') 
                                            
                                            :
                                            gridjs.h('button', {
                                            
                                            // ปุ่ม Add สำหรับแถวใหม่
                                                className: 'btn btn-success',
                                                onClick: () => {
                                                    $('#exampleModal').modal('show');
                                                    document.getElementById('exampleModalLabel').textContent = 'Add Student';
                        
                                                    // เคลียร์ข้อมูลในฟอร์ม
                                                    document.getElementById('inputId').value = '';
                                                    document.getElementById('inputPrefix').value = '';
                                                    document.getElementById('inputFirstName').value = '';
                                                    document.getElementById('inputLastName').value = '';
                                                    document.getElementById('inputDateOfBirth').value = '';
                                                    document.getElementById('inputCurriculumn').value = '';
                                                    document.getElementById('inputSex').value = '';
                                                    document.getElementById('inputPreviousSchoo').value = '';
                                                    document.getElementById('inputAddress').value = '';
                                                    document.getElementById('inputTelephone').value = '';
                                                    document.getElementById('inputEmail').value = '';
                                                    document.getElementById('inputLineID').value = '';
                                                    document.getElementById('inputStatus').value = '';
                        
                                                    document.getElementById('saveChanges').onclick = async () => {
                                                        const newData = {
                                                            id: document.getElementById('inputId').value ,
                                                            prefix_id: document.getElementById('inputPrefix').value,
                                                            first_name: document.getElementById('inputFirstName').value,
                                                            last_name: document.getElementById('inputLastName').value,
                                                            date_of_birth: document.getElementById('inputDateOfBirth').value,
                                                            curriculum_id: document.getElementById('inputCurriculumn').value,
                                                            sex: document.getElementById('inputSex').value,
                                                            previous_school: document.getElementById('inputPreviousSchoo').value,
                                                            address: document.getElementById('inputAddress').value,
                                                            telephone: document.getElementById('inputTelephone').value,
                                                            email: document.getElementById('inputEmail').value,
                                                            line_id: document.getElementById('inputLineID').value,
                                                            status: document.getElementById('inputStatus').value
                                                        };
                        
                                                        try {
                                                            const response = await fetch('http://localhost:3100/api/student', {
                                                                method: 'POST',
                                                                headers: { 'Content-Type': 'application/json' },
                                                                body: JSON.stringify(newData)
                                                            });
                        
                                                            if (response.ok) {
                                                                alert('Student added successfully');
                                                                $('#exampleModal').modal('hide');
                                                                grid.forceRender();
                                                            } else {
                                                                alert('Error adding student');
                                                            }
                                                        } catch (error) {
                                                            alert('Error adding student');
                                                        }
                                                    };
                                                }
                                            }, 'Add') ,

                                            isExistingStudent ? 
                                            gridjs.h('button', {
                                                className: 'btn btn-danger',
                                                onClick: async () => {
                                                    const studentId = row.cells[0].data; // รับ Student ID
                                                    if (confirm(`Are you sure you want to delete student with ID ${studentId}?`)) {
                                                        try {
                                                            const response = await fetch(`http://localhost:3100/api/student/${studentId}`, {
                                                                method: 'DELETE'
                                                            });

                                                            if (response.ok) {
                                                                alert('Student deleted successfully');
                                                                grid.forceRender(); // Refresh the grid
                                                            } else {
                                                                alert('Error deleting student');
                                                            }
                                                        } catch (error) {
                                                            alert('Error deleting student');
                                                        }
                                                    }
                                                }
                                            }, 'Delete') 
                                            :''
                                        ]);
                                    }
                                }
                            ],
                            style: { 
                                table: { 
                                    'white-space': 'nowrap',
                                }
                            },
                            search: true,
                            sort: true,
                            resizable: true,
                            pagination: true,
                            server: {
                                url: 'http://localhost:3100/api/student',
                                then: result => {
                                    const students = result.result.map(student => [
                                        student.id, 
                                        student.name, 
                                        student.first_name,
                                        student.last_name,
                                        student.date_of_birth, 
                                        student.short_name_th,
                                        student.sex,
                                        student.previous_school,
                                        student.address,
                                        student.telephone,
                                        student.email,
                                        student.line_id,
                                        student.status,
                                        '' // คอลัมน์ว่างสำหรับปุ่ม Actions
                                    ]);
                        
                                    // เพิ่มแถวเปล่าที่มีปุ่ม Add
                                    students.push(['', '', '', '', '', '', '', '', '', '', '', '', '', '']);
                                    return students;
                                }
                            }
                        }).render(document.getElementById("dataTable"));
                        </script>
                </div>
            </div>

            </div>
        </div>
        <!-- Modal Edit -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit Student</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                </div>
                <div class="modal-body">
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Student ID</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputId" placeholder="Student ID">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Prefix</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputPrefix" placeholder="Prefix">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">First Name</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Last Name</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Date of Birth</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputDateOfBirth" placeholder="Date of Birth">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Curriculum</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputCurriculumn" placeholder="Curriculum">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Sex</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputSex" placeholder="Sex">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Previous School</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputPreviousSchoo" placeholder="Previous School">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Address</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputAddress" placeholder="Address">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Telephone</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputTelephone" placeholder="Telephone">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Email</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputEmail" placeholder="Email">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Line ID</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputLineID" placeholder="Line ID">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Status</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" id="inputStatus" placeholder="Status">
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveChanges">Save changes</button>
                </div>
            </div>
            </div>
        </div>

    <!-- Footer -->
        <%- include('footer.ejs') %>
    <!-- End of Footer -->

        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->
<!-- Bootstrap core JavaScript-->
<script src="vendor/jquery/jquery.min.js"></script>
<script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

<!-- Core plugin JavaScript-->
<script src="vendor/jquery-easing/jquery.easing.min.js"></script>

<!-- Custom scripts for all pages-->
<script src="js/sb-admin-2.min.js"></script>

</body>

</html>